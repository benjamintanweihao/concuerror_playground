digraph {
  graph [ranksep=0.3]
  node [shape=box,width=7,fontname=Monospace]
  init [label="Initial"];
  subgraph {
    "#Ref<0.0.1.90>" [label="        1: P: undefined = erlang:whereis('Elixir.CounterServer')\l"];
    "init" -> "#Ref<0.0.1.90>"[weight=1000];
    "#Ref<0.0.1.128>" [label="        2: P: [] = erlang:process_info(P, registered_name)\l"];
    "#Ref<0.0.1.90>" -> "#Ref<0.0.1.128>"[weight=1000];
    "#Ref<0.0.1.140>" [label="        3: P: P.1 = erlang:spawn_opt({...})\l"];
    "#Ref<0.0.1.128>" -> "#Ref<0.0.1.140>"[weight=1000];
    "#Ref<0.0.1.151>" [label="        4: P.1: undefined = erlang:put('$ancestors', [...])\l"];
    "#Ref<0.0.1.140>" -> "#Ref<0.0.1.151>"[weight=1000];
    "#Ref<0.0.1.155>" [label="        5: P.1: undefined = erlang:put('$initial_call', {...})\l"];
    "#Ref<0.0.1.151>" -> "#Ref<0.0.1.155>"[weight=1000];
    "#Ref<0.0.1.157>" [label="        6: P.1: true = erlang:register('Elixir.CounterServer', P.1)\l"];
    "#Ref<0.0.1.155>" -> "#Ref<0.0.1.157>"[weight=1000];
    "#Ref<0.0.1.160>" [label="        7: P.1: table = ets:new(table, [...])\l"];
    "#Ref<0.0.1.157>" -> "#Ref<0.0.1.160>"[weight=1000];
    "#Ref<0.0.1.172>" [label="        8: P.1: true = ets:insert(table, {...})\l"];
    "#Ref<0.0.1.160>" -> "#Ref<0.0.1.172>"[weight=1000];
    "#Ref<0.0.1.176>" [label="        9: P.1: {...} = P ! {...}\l"];
    "#Ref<0.0.1.172>" -> "#Ref<0.0.1.176>"[weight=1000];
    "#Ref<0.0.1.180>" [label="       10: Message ({...}) from P.1 reaches P\l"];
    "#Ref<0.0.1.176>" -> "#Ref<0.0.1.180>"[weight=1000];
    "#Ref<0.0.1.182>" [label="       11: P: receives message ({...})\l"];
    "#Ref<0.0.1.180>" -> "#Ref<0.0.1.182>"[weight=1000];
    "#Ref<0.0.1.185>" [label="       12: P: {...} = erlang:send('Elixir.CounterServer', {...})\l"];
    "#Ref<0.0.1.182>" -> "#Ref<0.0.1.185>"[weight=1000];
    "#Ref<0.0.1.189>" [label="       13: P: P.1 = erlang:whereis('Elixir.CounterServer')\l"];
    "#Ref<0.0.1.185>" -> "#Ref<0.0.1.189>"[weight=1000];
    "#Ref<0.0.1.191>" [label="       14: P: #Ref<0.0.1.194> = erlang:monitor(process, P.1)\l"];
    "#Ref<0.0.1.189>" -> "#Ref<0.0.1.191>"[weight=1000];
    "#Ref<0.0.1.195>" [label="       15: P: {...} = erlang:send(P.1, {...}, [...])\l"];
    "#Ref<0.0.1.191>" -> "#Ref<0.0.1.195>"[weight=1000];
    "#Ref<0.0.1.199>" [label="       16: P: receive timeout expired after 5000 ms\l"];
    "#Ref<0.0.1.195>" -> "#Ref<0.0.1.199>"[weight=1000];
    "#Ref<0.0.1.201>" [label="       17: P: true = erlang:demonitor(#Ref<0.0.1.194>, [...])\l"];
    "#Ref<0.0.1.199>" -> "#Ref<0.0.1.201>"[weight=1000];
    "#Ref<0.0.1.204>" [label="       18: P: exits abnormally ({...})\l",color=red,penwidth=5];
    "#Ref<0.0.1.201>" -> "#Ref<0.0.1.204>"[weight=1000];
    "#Ref<0.0.1.206>" [label="       19: P: true = erlang:exit(P.1, {...})\l"];
    "#Ref<0.0.1.204>" -> "#Ref<0.0.1.206>"[weight=1000];
    "#Ref<0.0.1.210>" [label="       20: Message ({...}) from P reaches P.1\l"];
    "#Ref<0.0.1.206>" -> "#Ref<0.0.1.210>"[weight=1000];
    "#Ref<0.0.1.214>" [label="       21: Message ({...}) from P reaches P.1\l"];
    "#Ref<0.0.1.210>" -> "#Ref<0.0.1.214>"[weight=1000];
    "#Ref<0.0.1.217>" [label="       22: Exit signal ({...}) from P reaches P.1\l"];
    "#Ref<0.0.1.214>" -> "#Ref<0.0.1.217>"[weight=1000];
    "#Ref<0.0.1.221>" [label="       23: P.1: exits abnormally ({...})\l",color=red,penwidth=5];
    "#Ref<0.0.1.217>" -> "#Ref<0.0.1.221>"[weight=1000];
    "#Ref<0.0.1.225>" [label="       24: P.1: true = ets:delete(table)\l"];
    "#Ref<0.0.1.221>" -> "#Ref<0.0.1.225>"[weight=1000];
    "#Ref<0.0.1.228>" [label="       25: P.1: true = erlang:exit(P, {...})\l"];
    "#Ref<0.0.1.225>" -> "#Ref<0.0.1.228>"[weight=1000];
    "#Ref<0.0.1.233>" [label="       26: Exit signal ({...}) from P.1 reaches P\l"];
    "#Ref<0.0.1.228>" -> "#Ref<0.0.1.233>"[weight=1000];
    "#Ref<0.0.1.217>":e -> "#Ref<0.0.1.221>":e[constraint=false, color=red, dir=back, penwidth=3, style=dashed];
    "#Ref<0.0.1.337>" [label="1: Error",style=filled,fillcolor=red];
    "#Ref<0.0.1.233>" -> "#Ref<0.0.1.337>"[weight=1000];
  }
  subgraph{
    "#Ref<0.0.1.255>" [label="       22: P.1: receives message ({...})\l"];
    "#Ref<0.0.1.214>" -> "#Ref<0.0.1.255>"[style=invis,weight=1];
    "#Ref<0.0.1.217>" -> "#Ref<0.0.1.255>"[constraint=false];
    "#Ref<0.0.1.267>" [label="       23: P.1: true = ets:insert(table, {...})\l"];
    "#Ref<0.0.1.255>" -> "#Ref<0.0.1.267>"[weight=1000];
    "#Ref<0.0.1.271>" [label="       24: P.1: receives message ({...})\l"];
    "#Ref<0.0.1.267>" -> "#Ref<0.0.1.271>"[weight=1000];
    "#Ref<0.0.1.275>" [label="       25: P.1: [...] = ets:lookup(table, counter)\l"];
    "#Ref<0.0.1.271>" -> "#Ref<0.0.1.275>"[weight=1000];
    "#Ref<0.0.1.278>" [label="       26: P.1: true = ets:insert(table, {...})\l"];
    "#Ref<0.0.1.275>" -> "#Ref<0.0.1.278>"[weight=1000];
    "#Ref<0.0.1.280>" [label="       27: P.1: P.1 = erlang:whereis('Elixir.CounterServer')\l"];
    "#Ref<0.0.1.278>" -> "#Ref<0.0.1.280>"[weight=1000];
    "#Ref<0.0.1.283>" [label="       28: P.1: #Ref<0.0.1.286> = erlang:monitor(process, P.1)\l"];
    "#Ref<0.0.1.280>" -> "#Ref<0.0.1.283>"[weight=1000];
    "#Ref<0.0.1.287>" [label="       29: P.1: {...} = erlang:send(P.1, {...}, [...])\l"];
    "#Ref<0.0.1.283>" -> "#Ref<0.0.1.287>"[weight=1000];
    "#Ref<0.0.1.291>" [label="       30: Exit signal ({...}) from P reaches P.1\l"];
    "#Ref<0.0.1.287>" -> "#Ref<0.0.1.291>"[weight=1000];
    "#Ref<0.0.1.295>" [label="       31: P.1: exits abnormally ({...})\l",color=red,penwidth=5];
    "#Ref<0.0.1.291>" -> "#Ref<0.0.1.295>"[weight=1000];
    "#Ref<0.0.1.298>" [label="       32: P.1: true = ets:delete(table)\l"];
    "#Ref<0.0.1.295>" -> "#Ref<0.0.1.298>"[weight=1000];
    "#Ref<0.0.1.301>" [label="       33: P.1: true = erlang:exit(P, {...})\l"];
    "#Ref<0.0.1.298>" -> "#Ref<0.0.1.301>"[weight=1000];
    "#Ref<0.0.1.305>" [label="       34: P.1: {...} = erlang:send(P.1, {...})\l"];
    "#Ref<0.0.1.301>" -> "#Ref<0.0.1.305>"[weight=1000];
    "#Ref<0.0.1.310>" [label="       35: Exit signal ({...}) from P.1 reaches P\l"];
    "#Ref<0.0.1.305>" -> "#Ref<0.0.1.310>"[weight=1000];
    "#Ref<0.0.1.287>":e -> "#Ref<0.0.1.291>":e[constraint=false, color=red, dir=back, penwidth=3, style=dashed];
    "#Ref<0.0.1.468>" [label="2: Error",style=filled,fillcolor=red];
    "#Ref<0.0.1.310>" -> "#Ref<0.0.1.468>"[weight=1000];
  }
  subgraph{
    "#Ref<0.0.1.320>" [label="       29: Exit signal ({...}) from P reaches P.1\l"];
    "#Ref<0.0.1.283>" -> "#Ref<0.0.1.320>"[style=invis,weight=1];
    "#Ref<0.0.1.287>" -> "#Ref<0.0.1.320>"[constraint=false];
    "#Ref<0.0.1.339>" [label="       30: P.1: exits abnormally ({...})\l",color=red,penwidth=5];
    "#Ref<0.0.1.320>" -> "#Ref<0.0.1.339>"[weight=1000];
    "#Ref<0.0.1.342>" [label="       31: P.1: true = ets:delete(table)\l"];
    "#Ref<0.0.1.339>" -> "#Ref<0.0.1.342>"[weight=1000];
    "#Ref<0.0.1.346>" [label="       32: P.1: true = erlang:exit(P, {...})\l"];
    "#Ref<0.0.1.342>" -> "#Ref<0.0.1.346>"[weight=1000];
    "#Ref<0.0.1.350>" [label="       33: P.1: {...} = erlang:send(P.1, {...})\l"];
    "#Ref<0.0.1.346>" -> "#Ref<0.0.1.350>"[weight=1000];
    "#Ref<0.0.1.354>" [label="       34: Exit signal ({...}) from P.1 reaches P\l"];
    "#Ref<0.0.1.350>" -> "#Ref<0.0.1.354>"[weight=1000];
    "#Ref<0.0.1.283>":e -> "#Ref<0.0.1.320>":e[constraint=false, color=red, dir=back, penwidth=3, style=dashed];
    "#Ref<0.0.1.550>" [label="3: Error",style=filled,fillcolor=red];
    "#Ref<0.0.1.354>" -> "#Ref<0.0.1.550>"[weight=1000];
  }
  subgraph{
    "#Ref<0.0.1.361>" [label="       28: Exit signal ({...}) from P reaches P.1\l"];
    "#Ref<0.0.1.280>" -> "#Ref<0.0.1.361>"[style=invis,weight=1];
    "#Ref<0.0.1.283>" -> "#Ref<0.0.1.361>"[constraint=false];
    "#Ref<0.0.1.381>" [label="       29: P.1: exits abnormally ({...})\l",color=red,penwidth=5];
    "#Ref<0.0.1.361>" -> "#Ref<0.0.1.381>"[weight=1000];
    "#Ref<0.0.1.384>" [label="       30: P.1: true = ets:delete(table)\l"];
    "#Ref<0.0.1.381>" -> "#Ref<0.0.1.384>"[weight=1000];
    "#Ref<0.0.1.387>" [label="       31: P.1: true = erlang:exit(P, {...})\l"];
    "#Ref<0.0.1.384>" -> "#Ref<0.0.1.387>"[weight=1000];
    "#Ref<0.0.1.392>" [label="       32: Exit signal ({...}) from P.1 reaches P\l"];
    "#Ref<0.0.1.387>" -> "#Ref<0.0.1.392>"[weight=1000];
    "#Ref<0.0.1.280>":e -> "#Ref<0.0.1.361>":e[constraint=false, color=red, dir=back, penwidth=3, style=dashed];
    "#Ref<0.0.1.603>" [label="4: Error",style=filled,fillcolor=red];
    "#Ref<0.0.1.392>" -> "#Ref<0.0.1.603>"[weight=1000];
  }
  subgraph{
    "#Ref<0.0.1.401>" [label="       27: Exit signal ({...}) from P reaches P.1\l"];
    "#Ref<0.0.1.278>" -> "#Ref<0.0.1.401>"[style=invis,weight=1];
    "#Ref<0.0.1.280>" -> "#Ref<0.0.1.401>"[constraint=false];
    "#Ref<0.0.1.417>" [label="       28: P.1: exits abnormally ({...})\l",color=red,penwidth=5];
    "#Ref<0.0.1.401>" -> "#Ref<0.0.1.417>"[weight=1000];
    "#Ref<0.0.1.419>" [label="       29: P.1: true = ets:delete(table)\l"];
    "#Ref<0.0.1.417>" -> "#Ref<0.0.1.419>"[weight=1000];
    "#Ref<0.0.1.422>" [label="       30: P.1: true = erlang:exit(P, {...})\l"];
    "#Ref<0.0.1.419>" -> "#Ref<0.0.1.422>"[weight=1000];
    "#Ref<0.0.1.426>" [label="       31: Exit signal ({...}) from P.1 reaches P\l"];
    "#Ref<0.0.1.422>" -> "#Ref<0.0.1.426>"[weight=1000];
    "#Ref<0.0.1.278>":e -> "#Ref<0.0.1.401>":e[constraint=false, color=red, dir=back, penwidth=3, style=dashed];
    "#Ref<0.0.1.655>" [label="5: Error",style=filled,fillcolor=red];
    "#Ref<0.0.1.426>" -> "#Ref<0.0.1.655>"[weight=1000];
  }
  subgraph{
    "#Ref<0.0.1.433>" [label="       26: Exit signal ({...}) from P reaches P.1\l"];
    "#Ref<0.0.1.275>" -> "#Ref<0.0.1.433>"[style=invis,weight=1];
    "#Ref<0.0.1.278>" -> "#Ref<0.0.1.433>"[constraint=false];
    "#Ref<0.0.1.449>" [label="       27: P.1: exits abnormally ({...})\l",color=red,penwidth=5];
    "#Ref<0.0.1.433>" -> "#Ref<0.0.1.449>"[weight=1000];
    "#Ref<0.0.1.452>" [label="       28: P.1: true = ets:delete(table)\l"];
    "#Ref<0.0.1.449>" -> "#Ref<0.0.1.452>"[weight=1000];
    "#Ref<0.0.1.455>" [label="       29: P.1: true = erlang:exit(P, {...})\l"];
    "#Ref<0.0.1.452>" -> "#Ref<0.0.1.455>"[weight=1000];
    "#Ref<0.0.1.459>" [label="       30: Exit signal ({...}) from P.1 reaches P\l"];
    "#Ref<0.0.1.455>" -> "#Ref<0.0.1.459>"[weight=1000];
    "#Ref<0.0.1.275>":e -> "#Ref<0.0.1.433>":e[constraint=false, color=red, dir=back, penwidth=3, style=dashed];
    "#Ref<0.0.1.706>" [label="6: Error",style=filled,fillcolor=red];
    "#Ref<0.0.1.459>" -> "#Ref<0.0.1.706>"[weight=1000];
  }
  subgraph{
    "#Ref<0.0.1.467>" [label="       25: Exit signal ({...}) from P reaches P.1\l"];
    "#Ref<0.0.1.271>" -> "#Ref<0.0.1.467>"[style=invis,weight=1];
    "#Ref<0.0.1.275>" -> "#Ref<0.0.1.467>"[constraint=false];
    "#Ref<0.0.1.484>" [label="       26: P.1: exits abnormally ({...})\l",color=red,penwidth=5];
    "#Ref<0.0.1.467>" -> "#Ref<0.0.1.484>"[weight=1000];
    "#Ref<0.0.1.487>" [label="       27: P.1: true = ets:delete(table)\l"];
    "#Ref<0.0.1.484>" -> "#Ref<0.0.1.487>"[weight=1000];
    "#Ref<0.0.1.489>" [label="       28: P.1: true = erlang:exit(P, {...})\l"];
    "#Ref<0.0.1.487>" -> "#Ref<0.0.1.489>"[weight=1000];
    "#Ref<0.0.1.493>" [label="       29: Exit signal ({...}) from P.1 reaches P\l"];
    "#Ref<0.0.1.489>" -> "#Ref<0.0.1.493>"[weight=1000];
    "#Ref<0.0.1.267>":e -> "#Ref<0.0.1.467>":e[constraint=false, color=red, dir=back, penwidth=3, style=dashed];
    "#Ref<0.0.1.756>" [label="7: Error",style=filled,fillcolor=red];
    "#Ref<0.0.1.493>" -> "#Ref<0.0.1.756>"[weight=1000];
  }
  subgraph{
    "#Ref<0.0.1.499>" [label="       23: Exit signal ({...}) from P reaches P.1\l"];
    "#Ref<0.0.1.255>" -> "#Ref<0.0.1.499>"[style=invis,weight=1];
    "#Ref<0.0.1.267>" -> "#Ref<0.0.1.499>"[constraint=false];
    "#Ref<0.0.1.514>" [label="       24: P.1: exits abnormally ({...})\l",color=red,penwidth=5];
    "#Ref<0.0.1.499>" -> "#Ref<0.0.1.514>"[weight=1000];
    "#Ref<0.0.1.517>" [label="       25: P.1: true = ets:delete(table)\l"];
    "#Ref<0.0.1.514>" -> "#Ref<0.0.1.517>"[weight=1000];
    "#Ref<0.0.1.520>" [label="       26: P.1: true = erlang:exit(P, {...})\l"];
    "#Ref<0.0.1.517>" -> "#Ref<0.0.1.520>"[weight=1000];
    "#Ref<0.0.1.524>" [label="       27: Exit signal ({...}) from P.1 reaches P\l"];
    "#Ref<0.0.1.520>" -> "#Ref<0.0.1.524>"[weight=1000];
    "#Ref<0.0.1.801>" [label="8: Error",style=filled,fillcolor=red];
    "#Ref<0.0.1.524>" -> "#Ref<0.0.1.801>"[weight=1000];
  }
}
