digraph {
  graph [ranksep=0.3]
  node [shape=box,width=7,fontname=Monospace]
  init [label="Initial"];
  subgraph {
    "#Ref<0.0.1.90>" [label="        1: P: P.1 = erlang:spawn(erlang, apply, [...])\l"];
    "init" -> "#Ref<0.0.1.90>"[weight=1000];
    "#Ref<0.0.1.117>" [label="        2: P: Exception badarg raised by: erlang:send(name, stop)\l",color=orange,penwidth=5];
    "#Ref<0.0.1.90>" -> "#Ref<0.0.1.117>"[weight=1000];
    "#Ref<0.0.1.121>" [label="        3: P: exits abnormally ({...})\l",color=red,penwidth=5];
    "#Ref<0.0.1.117>" -> "#Ref<0.0.1.121>"[weight=1000];
    "#Ref<0.0.1.123>" [label="        4: P.1: undefined = erlang:whereis(name)\l"];
    "#Ref<0.0.1.121>" -> "#Ref<0.0.1.123>"[weight=1000];
    "#Ref<0.0.1.125>" [label="        5: P.1: P.1.1 = erlang:spawn(erlang, apply, [...])\l"];
    "#Ref<0.0.1.123>" -> "#Ref<0.0.1.125>"[weight=1000];
    "#Ref<0.0.1.127>" [label="        6: P.1: true = erlang:register(name, P.1.1)\l"];
    "#Ref<0.0.1.125>" -> "#Ref<0.0.1.127>"[weight=1000];
    "#Ref<0.0.1.129>" [label="        7: P.1: ok = erlang:send(P, ok)\l"];
    "#Ref<0.0.1.127>" -> "#Ref<0.0.1.129>"[weight=1000];
    "#Ref<0.0.1.132>" [label="        8: P.1: exits normally\l",color=lime,penwidth=5];
    "#Ref<0.0.1.129>" -> "#Ref<0.0.1.132>"[weight=1000];
    "#Ref<0.0.1.134>" [label="        9: Message (ok) from P.1 reaches P\l"];
    "#Ref<0.0.1.132>" -> "#Ref<0.0.1.134>"[weight=1000];
    "#Ref<0.0.1.117>":e -> "#Ref<0.0.1.127>":e[constraint=false, color=red, dir=back, penwidth=3, style=dashed];
    "#Ref<0.0.1.172>" [label="1: Error",style=filled,fillcolor=red];
    "#Ref<0.0.1.134>" -> "#Ref<0.0.1.172>"[weight=1000];
  }
}
